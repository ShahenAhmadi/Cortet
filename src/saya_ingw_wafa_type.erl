%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.21.0 on {{2018,8,1},{11,46,20}}
-module(saya_ingw_wafa_type).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2]).
-export([merge_msgs/2]).
-export([verify_msg/1]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("saya_ingw_wafa_type.hrl").
-include("gpb.hrl").



encode_msg(Msg) -> encode_msg(Msg, []).


encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg);
      false -> ok
    end,
    case Msg of
      #'saya.ingw.wafa.type.Conversation'{} ->
	  'e_msg_saya.ingw.wafa.type.Conversation'(Msg);
      #'saya.ingw.wafa.type.Board'{} ->
	  'e_msg_saya.ingw.wafa.type.Board'(Msg);
      #'saya.ingw.wafa.type.Timeline'{} ->
	  'e_msg_saya.ingw.wafa.type.Timeline'(Msg);
      #'saya.ingw.wafa.type.Message'{} ->
	  'e_msg_saya.ingw.wafa.type.Message'(Msg)
    end.


'e_msg_saya.ingw.wafa.type.Conversation'(Msg) ->
    'e_msg_saya.ingw.wafa.type.Conversation'(Msg, <<>>).


'e_msg_saya.ingw.wafa.type.Conversation'(#'saya.ingw.wafa.type.Conversation'{'CID'
										 =
										 F1},
					 Bin) ->
    e_type_fixed64(F1, <<Bin/binary, 9>>).

'e_msg_saya.ingw.wafa.type.Board'(Msg) ->
    'e_msg_saya.ingw.wafa.type.Board'(Msg, <<>>).


'e_msg_saya.ingw.wafa.type.Board'(#'saya.ingw.wafa.type.Board'{'BID'
								   = F1},
				  Bin) ->
    e_type_fixed64(F1, <<Bin/binary, 9>>).

'e_msg_saya.ingw.wafa.type.Timeline'(Msg) ->
    'e_msg_saya.ingw.wafa.type.Timeline'(Msg, <<>>).


'e_msg_saya.ingw.wafa.type.Timeline'(#'saya.ingw.wafa.type.Timeline'{a
									 = F1},
				     Bin) ->
    case F1 of
      undefined -> Bin;
      {board, OF1} ->
	  'e_mfield_saya.ingw.wafa.type.Timeline_board'(OF1,
							<<Bin/binary, 10>>);
      {conversation, OF1} ->
	  'e_mfield_saya.ingw.wafa.type.Timeline_conversation'(OF1,
							       <<Bin/binary,
								 18>>)
    end.

'e_msg_saya.ingw.wafa.type.Message'(Msg) ->
    'e_msg_saya.ingw.wafa.type.Message'(Msg, <<>>).


'e_msg_saya.ingw.wafa.type.Message'(#'saya.ingw.wafa.type.Message'{timestamp
								       = F1,
								   senderIID =
								       F2,
								   seq = F3,
								   timeline =
								       F4,
								   body = F5},
				    Bin) ->
    B1 = e_type_fixed64(F1, <<Bin/binary, 9>>),
    B2 = e_type_fixed64(F2, <<B1/binary, 17>>),
    B3 = e_type_int64(F3, <<B2/binary, 24>>),
    B4 = 'e_mfield_saya.ingw.wafa.type.Message_timeline'(F4,
							 <<B3/binary, 34>>),
    e_type_string(F5, <<B4/binary, 42>>).

'e_mfield_saya.ingw.wafa.type.Timeline_board'(Msg,
					      Bin) ->
    Bin2 = <<Bin/binary, 9>>,
    'e_msg_saya.ingw.wafa.type.Board'(Msg, Bin2).

'e_mfield_saya.ingw.wafa.type.Timeline_conversation'(Msg,
						     Bin) ->
    Bin2 = <<Bin/binary, 9>>,
    'e_msg_saya.ingw.wafa.type.Conversation'(Msg, Bin2).

'e_mfield_saya.ingw.wafa.type.Message_timeline'(Msg,
						Bin) ->
    SubBin = 'e_msg_saya.ingw.wafa.type.Timeline'(Msg,
						  <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.



e_type_int64(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_type_fixed64(Value, Bin) ->
    <<Bin/binary, Value:64/little>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    case MsgName of
      'saya.ingw.wafa.type.Conversation' ->
	  'd_msg_saya.ingw.wafa.type.Conversation'(Bin);
      'saya.ingw.wafa.type.Board' ->
	  'd_msg_saya.ingw.wafa.type.Board'(Bin);
      'saya.ingw.wafa.type.Timeline' ->
	  'd_msg_saya.ingw.wafa.type.Timeline'(Bin);
      'saya.ingw.wafa.type.Message' ->
	  'd_msg_saya.ingw.wafa.type.Message'(Bin)
    end.



'd_msg_saya.ingw.wafa.type.Conversation'(Bin) ->
    'dfp_read_field_def_saya.ingw.wafa.type.Conversation'(Bin,
							  0, 0, id(undefined)).

'dfp_read_field_def_saya.ingw.wafa.type.Conversation'(<<9,
							Rest/binary>>,
						      Z1, Z2, F1) ->
    'd_field_saya.ingw.wafa.type.Conversation_CID'(Rest, Z1,
						   Z2, F1);
'dfp_read_field_def_saya.ingw.wafa.type.Conversation'(<<>>,
						      0, 0, F1) ->
    #'saya.ingw.wafa.type.Conversation'{'CID' = F1};
'dfp_read_field_def_saya.ingw.wafa.type.Conversation'(Other,
						      Z1, Z2, F1) ->
    'dg_read_field_def_saya.ingw.wafa.type.Conversation'(Other,
							 Z1, Z2, F1).

'dg_read_field_def_saya.ingw.wafa.type.Conversation'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_saya.ingw.wafa.type.Conversation'(Rest,
							 N + 7, X bsl N + Acc,
							 F1);
'dg_read_field_def_saya.ingw.wafa.type.Conversation'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      9 ->
	  'd_field_saya.ingw.wafa.type.Conversation_CID'(Rest, 0,
							 0, F1);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_saya.ingw.wafa.type.Conversation'(Rest, 0,
							       0, F1);
	    1 ->
		'skip_64_saya.ingw.wafa.type.Conversation'(Rest, 0, 0,
							   F1);
	    2 ->
		'skip_length_delimited_saya.ingw.wafa.type.Conversation'(Rest,
									 0, 0,
									 F1);
	    5 ->
		'skip_32_saya.ingw.wafa.type.Conversation'(Rest, 0, 0,
							   F1)
	  end
    end;
'dg_read_field_def_saya.ingw.wafa.type.Conversation'(<<>>,
						     0, 0, F1) ->
    #'saya.ingw.wafa.type.Conversation'{'CID' = F1}.

'd_field_saya.ingw.wafa.type.Conversation_CID'(<<Value:64/little,
						 Rest/binary>>,
					       Z1, Z2, _) ->
    'dfp_read_field_def_saya.ingw.wafa.type.Conversation'(Rest,
							  Z1, Z2, Value).


'skip_varint_saya.ingw.wafa.type.Conversation'(<<1:1,
						 _:7, Rest/binary>>,
					       Z1, Z2, F1) ->
    'skip_varint_saya.ingw.wafa.type.Conversation'(Rest, Z1,
						   Z2, F1);
'skip_varint_saya.ingw.wafa.type.Conversation'(<<0:1,
						 _:7, Rest/binary>>,
					       Z1, Z2, F1) ->
    'dfp_read_field_def_saya.ingw.wafa.type.Conversation'(Rest,
							  Z1, Z2, F1).


'skip_length_delimited_saya.ingw.wafa.type.Conversation'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_saya.ingw.wafa.type.Conversation'(Rest,
							     N + 7,
							     X bsl N + Acc, F1);
'skip_length_delimited_saya.ingw.wafa.type.Conversation'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_saya.ingw.wafa.type.Conversation'(Rest2,
							  0, 0, F1).


'skip_32_saya.ingw.wafa.type.Conversation'(<<_:32,
					     Rest/binary>>,
					   Z1, Z2, F1) ->
    'dfp_read_field_def_saya.ingw.wafa.type.Conversation'(Rest,
							  Z1, Z2, F1).


'skip_64_saya.ingw.wafa.type.Conversation'(<<_:64,
					     Rest/binary>>,
					   Z1, Z2, F1) ->
    'dfp_read_field_def_saya.ingw.wafa.type.Conversation'(Rest,
							  Z1, Z2, F1).


'd_msg_saya.ingw.wafa.type.Board'(Bin) ->
    'dfp_read_field_def_saya.ingw.wafa.type.Board'(Bin, 0,
						   0, id(undefined)).

'dfp_read_field_def_saya.ingw.wafa.type.Board'(<<9,
						 Rest/binary>>,
					       Z1, Z2, F1) ->
    'd_field_saya.ingw.wafa.type.Board_BID'(Rest, Z1, Z2,
					    F1);
'dfp_read_field_def_saya.ingw.wafa.type.Board'(<<>>, 0,
					       0, F1) ->
    #'saya.ingw.wafa.type.Board'{'BID' = F1};
'dfp_read_field_def_saya.ingw.wafa.type.Board'(Other,
					       Z1, Z2, F1) ->
    'dg_read_field_def_saya.ingw.wafa.type.Board'(Other, Z1,
						  Z2, F1).

'dg_read_field_def_saya.ingw.wafa.type.Board'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_saya.ingw.wafa.type.Board'(Rest,
						  N + 7, X bsl N + Acc, F1);
'dg_read_field_def_saya.ingw.wafa.type.Board'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      9 ->
	  'd_field_saya.ingw.wafa.type.Board_BID'(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_saya.ingw.wafa.type.Board'(Rest, 0, 0, F1);
	    1 ->
		'skip_64_saya.ingw.wafa.type.Board'(Rest, 0, 0, F1);
	    2 ->
		'skip_length_delimited_saya.ingw.wafa.type.Board'(Rest,
								  0, 0, F1);
	    5 -> 'skip_32_saya.ingw.wafa.type.Board'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_saya.ingw.wafa.type.Board'(<<>>, 0,
					      0, F1) ->
    #'saya.ingw.wafa.type.Board'{'BID' = F1}.

'd_field_saya.ingw.wafa.type.Board_BID'(<<Value:64/little,
					  Rest/binary>>,
					Z1, Z2, _) ->
    'dfp_read_field_def_saya.ingw.wafa.type.Board'(Rest, Z1,
						   Z2, Value).


'skip_varint_saya.ingw.wafa.type.Board'(<<1:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F1) ->
    'skip_varint_saya.ingw.wafa.type.Board'(Rest, Z1, Z2,
					    F1);
'skip_varint_saya.ingw.wafa.type.Board'(<<0:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F1) ->
    'dfp_read_field_def_saya.ingw.wafa.type.Board'(Rest, Z1,
						   Z2, F1).


'skip_length_delimited_saya.ingw.wafa.type.Board'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_saya.ingw.wafa.type.Board'(Rest,
						      N + 7, X bsl N + Acc, F1);
'skip_length_delimited_saya.ingw.wafa.type.Board'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_saya.ingw.wafa.type.Board'(Rest2, 0,
						   0, F1).


'skip_32_saya.ingw.wafa.type.Board'(<<_:32,
				      Rest/binary>>,
				    Z1, Z2, F1) ->
    'dfp_read_field_def_saya.ingw.wafa.type.Board'(Rest, Z1,
						   Z2, F1).


'skip_64_saya.ingw.wafa.type.Board'(<<_:64,
				      Rest/binary>>,
				    Z1, Z2, F1) ->
    'dfp_read_field_def_saya.ingw.wafa.type.Board'(Rest, Z1,
						   Z2, F1).


'd_msg_saya.ingw.wafa.type.Timeline'(Bin) ->
    'dfp_read_field_def_saya.ingw.wafa.type.Timeline'(Bin,
						      0, 0, id(undefined)).

'dfp_read_field_def_saya.ingw.wafa.type.Timeline'(<<10,
						    Rest/binary>>,
						  Z1, Z2, F1) ->
    'd_field_saya.ingw.wafa.type.Timeline_board'(Rest, Z1,
						 Z2, F1);
'dfp_read_field_def_saya.ingw.wafa.type.Timeline'(<<18,
						    Rest/binary>>,
						  Z1, Z2, F1) ->
    'd_field_saya.ingw.wafa.type.Timeline_conversation'(Rest,
							Z1, Z2, F1);
'dfp_read_field_def_saya.ingw.wafa.type.Timeline'(<<>>,
						  0, 0, F1) ->
    #'saya.ingw.wafa.type.Timeline'{a = F1};
'dfp_read_field_def_saya.ingw.wafa.type.Timeline'(Other,
						  Z1, Z2, F1) ->
    'dg_read_field_def_saya.ingw.wafa.type.Timeline'(Other,
						     Z1, Z2, F1).

'dg_read_field_def_saya.ingw.wafa.type.Timeline'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_saya.ingw.wafa.type.Timeline'(Rest,
						     N + 7, X bsl N + Acc, F1);
'dg_read_field_def_saya.ingw.wafa.type.Timeline'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_saya.ingw.wafa.type.Timeline_board'(Rest, 0, 0,
						       F1);
      18 ->
	  'd_field_saya.ingw.wafa.type.Timeline_conversation'(Rest,
							      0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_saya.ingw.wafa.type.Timeline'(Rest, 0, 0,
							   F1);
	    1 ->
		'skip_64_saya.ingw.wafa.type.Timeline'(Rest, 0, 0, F1);
	    2 ->
		'skip_length_delimited_saya.ingw.wafa.type.Timeline'(Rest,
								     0, 0, F1);
	    5 ->
		'skip_32_saya.ingw.wafa.type.Timeline'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_saya.ingw.wafa.type.Timeline'(<<>>,
						 0, 0, F1) ->
    #'saya.ingw.wafa.type.Timeline'{a = F1}.

'd_field_saya.ingw.wafa.type.Timeline_board'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1)
    when N < 57 ->
    'd_field_saya.ingw.wafa.type.Timeline_board'(Rest,
						 N + 7, X bsl N + Acc, F1);
'd_field_saya.ingw.wafa.type.Timeline_board'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_saya.ingw.wafa.type.Board'(Bs),
    'dfp_read_field_def_saya.ingw.wafa.type.Timeline'(Rest2,
						      0, 0,
						      case F1 of
							undefined ->
							    {board, NewFValue};
							{board, MVF1} ->
							    {board,
							     'merge_msg_saya.ingw.wafa.type.Board'(MVF1,
												   NewFValue)};
							_ -> {board, NewFValue}
						      end).


'd_field_saya.ingw.wafa.type.Timeline_conversation'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1)
    when N < 57 ->
    'd_field_saya.ingw.wafa.type.Timeline_conversation'(Rest,
							N + 7, X bsl N + Acc,
							F1);
'd_field_saya.ingw.wafa.type.Timeline_conversation'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue =
	'd_msg_saya.ingw.wafa.type.Conversation'(Bs),
    'dfp_read_field_def_saya.ingw.wafa.type.Timeline'(Rest2,
						      0, 0,
						      case F1 of
							undefined ->
							    {conversation,
							     NewFValue};
							{conversation, MVF1} ->
							    {conversation,
							     'merge_msg_saya.ingw.wafa.type.Conversation'(MVF1,
													  NewFValue)};
							_ ->
							    {conversation,
							     NewFValue}
						      end).


'skip_varint_saya.ingw.wafa.type.Timeline'(<<1:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F1) ->
    'skip_varint_saya.ingw.wafa.type.Timeline'(Rest, Z1, Z2,
					       F1);
'skip_varint_saya.ingw.wafa.type.Timeline'(<<0:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F1) ->
    'dfp_read_field_def_saya.ingw.wafa.type.Timeline'(Rest,
						      Z1, Z2, F1).


'skip_length_delimited_saya.ingw.wafa.type.Timeline'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_saya.ingw.wafa.type.Timeline'(Rest,
							 N + 7, X bsl N + Acc,
							 F1);
'skip_length_delimited_saya.ingw.wafa.type.Timeline'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_saya.ingw.wafa.type.Timeline'(Rest2,
						      0, 0, F1).


'skip_32_saya.ingw.wafa.type.Timeline'(<<_:32,
					 Rest/binary>>,
				       Z1, Z2, F1) ->
    'dfp_read_field_def_saya.ingw.wafa.type.Timeline'(Rest,
						      Z1, Z2, F1).


'skip_64_saya.ingw.wafa.type.Timeline'(<<_:64,
					 Rest/binary>>,
				       Z1, Z2, F1) ->
    'dfp_read_field_def_saya.ingw.wafa.type.Timeline'(Rest,
						      Z1, Z2, F1).


'd_msg_saya.ingw.wafa.type.Message'(Bin) ->
    'dfp_read_field_def_saya.ingw.wafa.type.Message'(Bin, 0,
						     0, id(undefined),
						     id(undefined),
						     id(undefined),
						     id(undefined),
						     id(undefined)).

'dfp_read_field_def_saya.ingw.wafa.type.Message'(<<9,
						   Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5) ->
    'd_field_saya.ingw.wafa.type.Message_timestamp'(Rest,
						    Z1, Z2, F1, F2, F3, F4, F5);
'dfp_read_field_def_saya.ingw.wafa.type.Message'(<<17,
						   Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5) ->
    'd_field_saya.ingw.wafa.type.Message_senderIID'(Rest,
						    Z1, Z2, F1, F2, F3, F4, F5);
'dfp_read_field_def_saya.ingw.wafa.type.Message'(<<24,
						   Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5) ->
    'd_field_saya.ingw.wafa.type.Message_seq'(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5);
'dfp_read_field_def_saya.ingw.wafa.type.Message'(<<34,
						   Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5) ->
    'd_field_saya.ingw.wafa.type.Message_timeline'(Rest, Z1,
						   Z2, F1, F2, F3, F4, F5);
'dfp_read_field_def_saya.ingw.wafa.type.Message'(<<42,
						   Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, F5) ->
    'd_field_saya.ingw.wafa.type.Message_body'(Rest, Z1, Z2,
					       F1, F2, F3, F4, F5);
'dfp_read_field_def_saya.ingw.wafa.type.Message'(<<>>,
						 0, 0, F1, F2, F3, F4, F5) ->
    #'saya.ingw.wafa.type.Message'{timestamp = F1,
				   senderIID = F2, seq = F3, timeline = F4,
				   body = F5};
'dfp_read_field_def_saya.ingw.wafa.type.Message'(Other,
						 Z1, Z2, F1, F2, F3, F4, F5) ->
    'dg_read_field_def_saya.ingw.wafa.type.Message'(Other,
						    Z1, Z2, F1, F2, F3, F4, F5).

'dg_read_field_def_saya.ingw.wafa.type.Message'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3, F4, F5)
    when N < 32 - 7 ->
    'dg_read_field_def_saya.ingw.wafa.type.Message'(Rest,
						    N + 7, X bsl N + Acc, F1,
						    F2, F3, F4, F5);
'dg_read_field_def_saya.ingw.wafa.type.Message'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3, F4, F5) ->
    Key = X bsl N + Acc,
    case Key of
      9 ->
	  'd_field_saya.ingw.wafa.type.Message_timestamp'(Rest, 0,
							  0, F1, F2, F3, F4,
							  F5);
      17 ->
	  'd_field_saya.ingw.wafa.type.Message_senderIID'(Rest, 0,
							  0, F1, F2, F3, F4,
							  F5);
      24 ->
	  'd_field_saya.ingw.wafa.type.Message_seq'(Rest, 0, 0,
						    F1, F2, F3, F4, F5);
      34 ->
	  'd_field_saya.ingw.wafa.type.Message_timeline'(Rest, 0,
							 0, F1, F2, F3, F4, F5);
      42 ->
	  'd_field_saya.ingw.wafa.type.Message_body'(Rest, 0, 0,
						     F1, F2, F3, F4, F5);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_saya.ingw.wafa.type.Message'(Rest, 0, 0,
							  F1, F2, F3, F4, F5);
	    1 ->
		'skip_64_saya.ingw.wafa.type.Message'(Rest, 0, 0, F1,
						      F2, F3, F4, F5);
	    2 ->
		'skip_length_delimited_saya.ingw.wafa.type.Message'(Rest,
								    0, 0, F1,
								    F2, F3, F4,
								    F5);
	    5 ->
		'skip_32_saya.ingw.wafa.type.Message'(Rest, 0, 0, F1,
						      F2, F3, F4, F5)
	  end
    end;
'dg_read_field_def_saya.ingw.wafa.type.Message'(<<>>, 0,
						0, F1, F2, F3, F4, F5) ->
    #'saya.ingw.wafa.type.Message'{timestamp = F1,
				   senderIID = F2, seq = F3, timeline = F4,
				   body = F5}.

'd_field_saya.ingw.wafa.type.Message_timestamp'(<<Value:64/little,
						  Rest/binary>>,
						Z1, Z2, _, F2, F3, F4, F5) ->
    'dfp_read_field_def_saya.ingw.wafa.type.Message'(Rest,
						     Z1, Z2, Value, F2, F3, F4,
						     F5).


'd_field_saya.ingw.wafa.type.Message_senderIID'(<<Value:64/little,
						  Rest/binary>>,
						Z1, Z2, F1, _, F3, F4, F5) ->
    'dfp_read_field_def_saya.ingw.wafa.type.Message'(Rest,
						     Z1, Z2, F1, Value, F3, F4,
						     F5).


'd_field_saya.ingw.wafa.type.Message_seq'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    'd_field_saya.ingw.wafa.type.Message_seq'(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4,
					      F5);
'd_field_saya.ingw.wafa.type.Message_seq'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, _, F4, F5) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    'dfp_read_field_def_saya.ingw.wafa.type.Message'(Rest,
						     0, 0, F1, F2, NewFValue,
						     F4, F5).


'd_field_saya.ingw.wafa.type.Message_timeline'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    'd_field_saya.ingw.wafa.type.Message_timeline'(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3, F4, F5);
'd_field_saya.ingw.wafa.type.Message_timeline'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_saya.ingw.wafa.type.Timeline'(Bs),
    'dfp_read_field_def_saya.ingw.wafa.type.Message'(Rest2,
						     0, 0, F1, F2, F3,
						     if F4 == undefined ->
							    NewFValue;
							true ->
							    'merge_msg_saya.ingw.wafa.type.Timeline'(F4,
												     NewFValue)
						     end,
						     F5).


'd_field_saya.ingw.wafa.type.Message_body'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    'd_field_saya.ingw.wafa.type.Message_body'(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5);
'd_field_saya.ingw.wafa.type.Message_body'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_saya.ingw.wafa.type.Message'(Rest2,
						     0, 0, F1, F2, F3, F4,
						     NewFValue).


'skip_varint_saya.ingw.wafa.type.Message'(<<1:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3, F4, F5) ->
    'skip_varint_saya.ingw.wafa.type.Message'(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5);
'skip_varint_saya.ingw.wafa.type.Message'(<<0:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3, F4, F5) ->
    'dfp_read_field_def_saya.ingw.wafa.type.Message'(Rest,
						     Z1, Z2, F1, F2, F3, F4,
						     F5).


'skip_length_delimited_saya.ingw.wafa.type.Message'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    'skip_length_delimited_saya.ingw.wafa.type.Message'(Rest,
							N + 7, X bsl N + Acc,
							F1, F2, F3, F4, F5);
'skip_length_delimited_saya.ingw.wafa.type.Message'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3, F4,
						    F5) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_saya.ingw.wafa.type.Message'(Rest2,
						     0, 0, F1, F2, F3, F4, F5).


'skip_32_saya.ingw.wafa.type.Message'(<<_:32,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5) ->
    'dfp_read_field_def_saya.ingw.wafa.type.Message'(Rest,
						     Z1, Z2, F1, F2, F3, F4,
						     F5).


'skip_64_saya.ingw.wafa.type.Message'(<<_:64,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5) ->
    'dfp_read_field_def_saya.ingw.wafa.type.Message'(Rest,
						     Z1, Z2, F1, F2, F3, F4,
						     F5).






merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    case Prev of
      #'saya.ingw.wafa.type.Conversation'{} ->
	  'merge_msg_saya.ingw.wafa.type.Conversation'(Prev, New);
      #'saya.ingw.wafa.type.Board'{} ->
	  'merge_msg_saya.ingw.wafa.type.Board'(Prev, New);
      #'saya.ingw.wafa.type.Timeline'{} ->
	  'merge_msg_saya.ingw.wafa.type.Timeline'(Prev, New);
      #'saya.ingw.wafa.type.Message'{} ->
	  'merge_msg_saya.ingw.wafa.type.Message'(Prev, New)
    end.

'merge_msg_saya.ingw.wafa.type.Conversation'(Prev,
					     undefined) ->
    Prev;
'merge_msg_saya.ingw.wafa.type.Conversation'(undefined,
					     New) ->
    New;
'merge_msg_saya.ingw.wafa.type.Conversation'(#'saya.ingw.wafa.type.Conversation'{'CID'
										     =
										     PFCID},
					     #'saya.ingw.wafa.type.Conversation'{'CID'
										     =
										     NFCID}) ->
    #'saya.ingw.wafa.type.Conversation'{'CID' =
					    if NFCID =:= undefined -> PFCID;
					       true -> NFCID
					    end}.

'merge_msg_saya.ingw.wafa.type.Board'(Prev,
				      undefined) ->
    Prev;
'merge_msg_saya.ingw.wafa.type.Board'(undefined, New) ->
    New;
'merge_msg_saya.ingw.wafa.type.Board'(#'saya.ingw.wafa.type.Board'{'BID'
								       = PFBID},
				      #'saya.ingw.wafa.type.Board'{'BID' =
								       NFBID}) ->
    #'saya.ingw.wafa.type.Board'{'BID' =
				     if NFBID =:= undefined -> PFBID;
					true -> NFBID
				     end}.

'merge_msg_saya.ingw.wafa.type.Timeline'(#'saya.ingw.wafa.type.Timeline'{a
									     =
									     PFa},
					 #'saya.ingw.wafa.type.Timeline'{a =
									     NFa}) ->
    #'saya.ingw.wafa.type.Timeline'{a =
					case {PFa, NFa} of
					  {{board, OPFa}, {board, ONFa}} ->
					      {board,
					       'merge_msg_saya.ingw.wafa.type.Board'(OPFa,
										     ONFa)};
					  {{conversation, OPFa},
					   {conversation, ONFa}} ->
					      {conversation,
					       'merge_msg_saya.ingw.wafa.type.Conversation'(OPFa,
											    ONFa)};
					  {_, undefined} -> PFa;
					  _ -> NFa
					end}.

'merge_msg_saya.ingw.wafa.type.Message'(#'saya.ingw.wafa.type.Message'{timestamp
									   =
									   PFtimestamp,
								       senderIID
									   =
									   PFsenderIID,
								       seq =
									   PFseq,
								       timeline
									   =
									   PFtimeline,
								       body =
									   PFbody},
					#'saya.ingw.wafa.type.Message'{timestamp
									   =
									   NFtimestamp,
								       senderIID
									   =
									   NFsenderIID,
								       seq =
									   NFseq,
								       timeline
									   =
									   NFtimeline,
								       body =
									   NFbody}) ->
    #'saya.ingw.wafa.type.Message'{timestamp =
				       if NFtimestamp =:= undefined ->
					      PFtimestamp;
					  true -> NFtimestamp
				       end,
				   senderIID =
				       if NFsenderIID =:= undefined ->
					      PFsenderIID;
					  true -> NFsenderIID
				       end,
				   seq =
				       if NFseq =:= undefined -> PFseq;
					  true -> NFseq
				       end,
				   timeline =
				       'merge_msg_saya.ingw.wafa.type.Timeline'(PFtimeline,
										NFtimeline),
				   body =
				       if NFbody =:= undefined -> PFbody;
					  true -> NFbody
				       end}.



verify_msg(Msg) ->
    case Msg of
      #'saya.ingw.wafa.type.Conversation'{} ->
	  'v_msg_saya.ingw.wafa.type.Conversation'(Msg,
						   ['saya.ingw.wafa.type.Conversation']);
      #'saya.ingw.wafa.type.Board'{} ->
	  'v_msg_saya.ingw.wafa.type.Board'(Msg,
					    ['saya.ingw.wafa.type.Board']);
      #'saya.ingw.wafa.type.Timeline'{} ->
	  'v_msg_saya.ingw.wafa.type.Timeline'(Msg,
					       ['saya.ingw.wafa.type.Timeline']);
      #'saya.ingw.wafa.type.Message'{} ->
	  'v_msg_saya.ingw.wafa.type.Message'(Msg,
					      ['saya.ingw.wafa.type.Message']);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


'v_msg_saya.ingw.wafa.type.Conversation'(#'saya.ingw.wafa.type.Conversation'{'CID'
										 =
										 F1},
					 Path) ->
    v_type_fixed64(F1, ['CID' | Path]), ok;
'v_msg_saya.ingw.wafa.type.Conversation'(X, Path) ->
    mk_type_error({expected_msg,
		   'saya.ingw.wafa.type.Conversation'},
		  X, Path).

'v_msg_saya.ingw.wafa.type.Board'(#'saya.ingw.wafa.type.Board'{'BID'
								   = F1},
				  Path) ->
    v_type_fixed64(F1, ['BID' | Path]), ok;
'v_msg_saya.ingw.wafa.type.Board'(X, Path) ->
    mk_type_error({expected_msg,
		   'saya.ingw.wafa.type.Board'},
		  X, Path).

'v_msg_saya.ingw.wafa.type.Timeline'(#'saya.ingw.wafa.type.Timeline'{a
									 = F1},
				     Path) ->
    case F1 of
      undefined -> ok;
      {board, OF1} ->
	  'v_msg_saya.ingw.wafa.type.Board'(OF1,
					    [board, a | Path]);
      {conversation, OF1} ->
	  'v_msg_saya.ingw.wafa.type.Conversation'(OF1,
						   [conversation, a | Path]);
      _ -> mk_type_error(invalid_oneof, F1, [a | Path])
    end,
    ok;
'v_msg_saya.ingw.wafa.type.Timeline'(X, Path) ->
    mk_type_error({expected_msg,
		   'saya.ingw.wafa.type.Timeline'},
		  X, Path).

'v_msg_saya.ingw.wafa.type.Message'(#'saya.ingw.wafa.type.Message'{timestamp
								       = F1,
								   senderIID =
								       F2,
								   seq = F3,
								   timeline =
								       F4,
								   body = F5},
				    Path) ->
    v_type_fixed64(F1, [timestamp | Path]),
    v_type_fixed64(F2, [senderIID | Path]),
    v_type_int64(F3, [seq | Path]),
    'v_msg_saya.ingw.wafa.type.Timeline'(F4,
					 [timeline | Path]),
    v_type_string(F5, [body | Path]),
    ok.

v_type_int64(N, _Path)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
		  N, Path);
v_type_int64(X, Path) ->
    mk_type_error({bad_integer, int64, signed, 64}, X,
		  Path).

v_type_fixed64(N, _Path)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_fixed64(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, fixed64, unsigned,
		   64},
		  N, Path);
v_type_fixed64(X, Path) ->
    mk_type_error({bad_integer, fixed64, unsigned, 64}, X,
		  Path).

v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



-compile({nowarn_unused_function,id/1}).
-compile({inline,id/1}).
id(X) -> X.

-compile({nowarn_unused_function,cons/2}).
-compile({inline,cons/2}).
cons(Elem, Acc) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/1}).
-compile({inline,lists_reverse/1}).
'lists_reverse'(L) -> lists:reverse(L).

-compile({nowarn_unused_function,'erlang_++'/2}).
-compile({inline,'erlang_++'/2}).
'erlang_++'(A, B) -> A ++ B.



get_msg_defs() ->
    [{{msg, 'saya.ingw.wafa.type.Conversation'},
      [#field{name = 'CID', fnum = 1, rnum = 2,
	      type = fixed64, occurrence = required, opts = []}]},
     {{msg, 'saya.ingw.wafa.type.Board'},
      [#field{name = 'BID', fnum = 1, rnum = 2,
	      type = fixed64, occurrence = required, opts = []}]},
     {{msg, 'saya.ingw.wafa.type.Timeline'},
      [#gpb_oneof{name = a, rnum = 2,
		  fields =
		      [#field{name = board, fnum = 1, rnum = 2,
			      type = {msg, 'saya.ingw.wafa.type.Board'},
			      occurrence = optional, opts = []},
		       #field{name = conversation, fnum = 2, rnum = 2,
			      type = {msg, 'saya.ingw.wafa.type.Conversation'},
			      occurrence = optional, opts = []}]}]},
     {{msg, 'saya.ingw.wafa.type.Message'},
      [#field{name = timestamp, fnum = 1, rnum = 2,
	      type = fixed64, occurrence = required, opts = []},
       #field{name = senderIID, fnum = 2, rnum = 3,
	      type = fixed64, occurrence = required, opts = []},
       #field{name = seq, fnum = 3, rnum = 4, type = int64,
	      occurrence = required, opts = []},
       #field{name = timeline, fnum = 4, rnum = 5,
	      type = {msg, 'saya.ingw.wafa.type.Timeline'},
	      occurrence = required, opts = []},
       #field{name = body, fnum = 5, rnum = 6, type = string,
	      occurrence = required, opts = []}]}].


get_msg_names() ->
    ['saya.ingw.wafa.type.Conversation',
     'saya.ingw.wafa.type.Board',
     'saya.ingw.wafa.type.Timeline',
     'saya.ingw.wafa.type.Message'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def('saya.ingw.wafa.type.Conversation') ->
    [#field{name = 'CID', fnum = 1, rnum = 2,
	    type = fixed64, occurrence = required, opts = []}];
find_msg_def('saya.ingw.wafa.type.Board') ->
    [#field{name = 'BID', fnum = 1, rnum = 2,
	    type = fixed64, occurrence = required, opts = []}];
find_msg_def('saya.ingw.wafa.type.Timeline') ->
    [#gpb_oneof{name = a, rnum = 2,
		fields =
		    [#field{name = board, fnum = 1, rnum = 2,
			    type = {msg, 'saya.ingw.wafa.type.Board'},
			    occurrence = optional, opts = []},
		     #field{name = conversation, fnum = 2, rnum = 2,
			    type = {msg, 'saya.ingw.wafa.type.Conversation'},
			    occurrence = optional, opts = []}]}];
find_msg_def('saya.ingw.wafa.type.Message') ->
    [#field{name = timestamp, fnum = 1, rnum = 2,
	    type = fixed64, occurrence = required, opts = []},
     #field{name = senderIID, fnum = 2, rnum = 3,
	    type = fixed64, occurrence = required, opts = []},
     #field{name = seq, fnum = 3, rnum = 4, type = int64,
	    occurrence = required, opts = []},
     #field{name = timeline, fnum = 4, rnum = 5,
	    type = {msg, 'saya.ingw.wafa.type.Timeline'},
	    occurrence = required, opts = []},
     #field{name = body, fnum = 5, rnum = 6, type = string,
	    occurrence = required, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> 'saya.ingw.wafa.type'.



gpb_version_as_string() ->
    "3.21.0".

gpb_version_as_list() ->
    [3,21,0].
